// ========== デバッグ版GASコード ==========
// このコードは問題の原因を特定するためのデバッグ情報を含みます

// POSTリクエストを処理する関数
function doPost(e) {
  try {
    let data;
    
    // リクエスト内容をログに記録
    console.log('=== REQUEST DEBUG INFO ===');
    console.log('postData.contents:', e.postData ? e.postData.contents : 'なし');
    console.log('parameter.data:', e.parameter ? e.parameter.data : 'なし');
    
    // リクエストボディをパース（複数の形式に対応）
    if (e.postData && e.postData.contents) {
      // 通常のJSONボディ
      data = JSON.parse(e.postData.contents);
    } else if (e.parameter && e.parameter.data) {
      // FormDataまたはURLパラメータとして送信された場合
      data = JSON.parse(e.parameter.data);
    } else {
      // その他の形式（パラメータを直接確認）
      data = e.parameter || {};
    }
    
    // 受信したデータの内容を確認
    console.log('=== RECEIVED DATA ===');
    console.log('全データ:', JSON.stringify(data));
    console.log('remarks フィールド:', data.remarks);
    console.log('remarks の型:', typeof data.remarks);
    console.log('remarks の長さ:', data.remarks ? data.remarks.length : 0);
    
    // スプレッドシートを開く
    const spreadsheetId = '1-vBChfdpYN1-Sb92jVX5n1FA8eTFH_ztZgQyZCsTwN4';
    const sheet = SpreadsheetApp.openById(spreadsheetId).getSheetByName('回答一覧');
    
    // データを配列に変換
    const row = [
      data.timestamp || Utilities.formatDate(new Date(), 'Asia/Tokyo', 'yyyy-MM-dd HH:mm:ss'),
      data.company || '',
      data.industry || '',
      data.headcount || '',
      data.name || '',
      data.email || '',
      data.answers?.q1 || data.answers?.[1] || '',
      data.answers?.q2 || data.answers?.[2] || '',
      data.answers?.q3 || data.answers?.[3] || '',
      data.answers?.q4 || data.answers?.[4] || '',
      data.answers?.q5 || data.answers?.[5] || '',
      data.answers?.q6 || data.answers?.[6] || '',
      data.answers?.q7 || data.answers?.[7] || '',
      data.answers?.q8 || data.answers?.[8] || '',
      data.answers?.q9 || data.answers?.[9] || '',
      data.answers?.q10 || data.answers?.[10] || '',
      data.answers?.q11 || data.answers?.[11] || '',
      data.answers?.q12 || data.answers?.[12] || '',
      data.answers?.q13 || data.answers?.[13] || '',
      data.answers?.q14 || data.answers?.[14] || '',
      data.answers?.q15 || data.answers?.[15] || '',
      data.total_score || 0,
      data.tier || '',
      data.remarks || ''
    ];
    
    // 配列の内容を確認
    console.log('=== ROW DATA ===');
    console.log('配列の長さ:', row.length);
    console.log('remarks の位置 (0-indexed):', row.length - 1);
    console.log('remarks の値:', row[row.length - 1]);
    
    // 最終行に追加
    const lastRow = sheet.getLastRow();
    sheet.appendRow(row);
    
    console.log('=== WRITE COMPLETE ===');
    console.log('書き込み行番号:', lastRow + 1);
    
    // 成功レスポンス（デバッグ情報付き）
    return ContentService
      .createTextOutput(JSON.stringify({
        status: 'success',
        debug: {
          receivedRemarks: data.remarks || 'なし',
          remarksLength: data.remarks ? data.remarks.length : 0,
          rowLength: row.length,
          lastRowNumber: lastRow + 1
        }
      }))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    // エラーレスポンス
    console.error('ERROR:', error.toString());
    console.error('Stack:', error.stack);
    return ContentService
      .createTextOutput(JSON.stringify({
        status: 'error',
        message: error.toString(),
        stack: error.stack
      }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

// GETリクエストを処理する関数（テスト用）
function doGet(e) {
  // スプレッドシートの列数を確認
  try {
    const spreadsheetId = '1-vBChfdpYN1-Sb92jVX5n1FA8eTFH_ztZgQyZCsTwN4';
    const sheet = SpreadsheetApp.openById(spreadsheetId).getSheetByName('回答一覧');
    const lastColumn = sheet.getLastColumn();
    const headers = sheet.getRange(1, 1, 1, lastColumn).getValues()[0];
    
    return ContentService
      .createTextOutput(JSON.stringify({
        status: 'ok',
        message: 'Working!',
        sheetInfo: {
          lastColumn: lastColumn,
          headers: headers,
          remarksColumnIndex: headers.indexOf('remarks') + 1
        }
      }))
      .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService
      .createTextOutput(JSON.stringify({
        status: 'ok',
        message: 'Working!',
        error: 'Could not read sheet info'
      }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

// ========== ここまでコピー ==========